
1.对WEB标准以及W3C的理解与认识
标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、
内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供
打印版本而不需要复制内容、提高网站易用性；

2.xhtml和html有什么区别
HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言
最主要的不同：
XHTML 元素必须被正确地嵌套。
XHTML 元素必须被关闭。
标签名必须用小写字母。
XHTML 文档必须拥有根元素

3.CSS引入的方式有哪些? link和@import的区别是?
区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。
区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。
区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。
区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。

4.javascript的本地对象，内置对象和宿主对象
本地对象为array obj regexp等可以new实例化
内置对象为gload Math 等不可以实例化的
宿主为浏览器自带的document,window 等

5.类数组对象和数组的区别
类数组对象没有数组的方法;

6.作用域
1、(function(x){delete x; return x;})(1)
输出1
解答：在严格模式下出错，非严格不报错

2、var x = 1;
if(function z(){}){console.log( x += (typeof z));}
输出1undefined

3、var h =(function a(){console.log(1)}, function b(){console.log(2)})()
输出2

4、var h = function a(){return 23;}
console.log(a)
输出undefined

// var bar = function foo(){};就是一个有效的命名函数表达式
// foo只在新定义的函数作用域内有效，因为规范规定了标示符不能在外围的作用域内有效
var f = function foo(){
    return typeof foo; // foo是在内部作用域内有效
};
// foo在外部用于是不可见的
typeof foo; // "undefined"
f(); // "function"


7.堆和栈
堆一般是由程序员来分配的，用于不知道大小的对象的存储；
栈一般是编译器自动分配的，存储基本数据类型以及用于函数的执行（保存代码执行路径）
栈要快一点

8.浏览器url向服务器发请求的过程。
我从dns服务开始跟他说，又从应用层扯到网络层，最后扯到tomcat服务器（这里有一点失误，一定要提到socket）
一个http请求报文由请求行<request-line>、请求头部<headers>、空行＜blank-line＞
和请求数据＜request-body＞4个部分组成

        查找浏览器缓存
        DNS解析、查找该域名对应的IP地址、重定向（301）、发出第二个GET请求
        进行HTTP协议会话
        客户端发送报头(请求报头)
        服务器回馈报头(响应报头)
        html文档开始下载
        文档树建立，根据标记请求所需指定MIME类型的文件
        文件显示
        [
        浏览器这边做的工作大致分为以下几步：
        加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。
        解析：对加载到的资源（HTML、JS、CSS等）进行语法解析，建议相应的内部数据结构（比如HTML的DOM树，
        JS的（对象）属性表，CSS的样式规则等等）
        }


9.cors和jsonp相比：
a.jsonp只能实现get请求，cors支持所有的
b.cors使用XMLHttpRequest对象请求，jsonp使用src方式
c.jsonp是被老浏览器支持，cors是新方法

9.
1、表示发生事件：
（1）非IE浏览器下，事件对应的函数有一个隐藏的变量e，表示发生事件。
（2）IE下，不需要e变量，window.event表示发生事件。
解决方案：用e||window.event来兼容。


2、触发事件对象（触发事件的元素被认为是目标target）：
（1）IE下，window.event对象有srcElement属性，但没有target属性。
（2）Firefox下，e对象有target属性，但没有srcElement属性。
（3）Chrome下，e对象同时具有target和srcElement属性。
解决方案：event.srcElement ? event.srcElement : event.target来兼容。


3、按键码（字符代码）：
（1）IE下，window.event对象只有keyCode属性。
（2）FireFox下，e对象有which和charCode属性。
（3）Opera下，e对象有keyCode和which属性。
（4）Chrome下，e对象有keyCode、which和charCode属性。
解决方案：用e.keyCode || e.which || e.charCode来兼容。


4、阻止事件的默认行为：
（1）IE 中阻止事件的默认行为需要将window.event.returnValue属性设置为false。
（2）非IE阻止事件的默认行为需要调用 e.preventDefault() 方法。
解决方案：条件判断浏览器是否具有event.preventDefault再做相应处理。


5、阻止事件冒泡：
（1）IE阻止事件冒泡需要设置window.event.cancelBubble = true。
（2）非IE阻止事件冒泡需要调用e.stopPropagation()。
解决方案：条件判断浏览器是否具有event.stopPropagation再做相应处理。

6.css与js动画的区别，优缺点，使用场景
功能涵盖面，JS比CSS3大
    定义动画过程的@keyframes不支持递归定义，如果有多种类似的动画过程，需要调节多个参数来生成的话，将会有很大的冗余（比如jQuery Mobile的动画方案），而JS则天然可以以一套函数实现多个不同的动画过程
    时间尺度上，@keyframes的动画粒度粗，而JS的动画粒度控制可以很细
    CSS3动画里被支持的时间函数非常少，不够灵活
    以现有的接口，CSS3动画无法做到支持两个以上的状态转化
    实现/重构难度不一，CSS3比JS更简单，性能调优方向固定
    对于帧速表现不好的低版本浏览器，CSS3可以做到自然降级，而JS则需要撰写额外代码
    CSS动画有天然事件支持（TransitionEnd、AnimationEnd，但是它们都需要针对浏览器加前缀），JS则需要自己写事件
    CSS3有兼容性问题，而JS大多时候没有兼容性问题

    CSS3的动画的优点：
        在性能上会稍微好一些，浏览器会对CSS3的动画做一些优化（比如专门新建一个图层用来跑动画）
        代码相对简单
        加上 translateZ(0) 强制指定硬件加速。
    但其缺点也很明显：
        在动画控制上不够灵活
        兼容性不好
        部分动画功能无法实现（如滚动动画，视差滚动等）


html页面显示过程
    解析HTML，并生成一棵DOM tree
    解析各种样式并结合DOM tree生成一棵Render tree
    对Render tree的各个节点计算布局信息，比如box的位置与尺寸
    根据Render tree并利用浏览器的UI层进行绘制流程。
其中，第三步，对render tree的各个结点计算布局信息为时间占用较大的一部分，而在这一步中，包含了layout，layout操作，是对render tree中对象的大小、
尺寸进行计算，在默认情况下，浏览器的layout为lazy模式，也就是说，并非每次我们对DOM进行修改时都会layout，而是将这些修改存储在一个队列中，
在一定的情况下统一提交队列，进而实现layout操作。



