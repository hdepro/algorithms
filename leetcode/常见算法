1.判断平衡二叉树
2.2Sum
3.第K大数
4.堆排序
5.快速排序以及时间复杂度
6.求一个数组最大连续的递增子序列的长度

1.TF-IDF怎么算
2.循环数组二分查找leetcode33（我说先二分搜索找分界点，然后转化为普通二分搜索，被说效率不行，然后现想新的高效的。。。）
3.两个有序数组找前k个
4.m个有序数组找前k个（小根堆运用）
行列分别递增的矩阵找某个数（找矩阵的中间点，把矩阵分成四块，去掉左上角一块，之后递归的处理剩下的3块直到找到），分析时间复杂度。

先序遍历二叉树，非递归实现
Longest Common Subsequence
长度为2n + 1的整型数组的中位数

单链表找环（几种反向遍历单链表的方法）
对两个升序数组求中位数

判断一个数字是否180°旋转对称，如1, 619, 88 这样（[0, 0], [1, 1], [6, 9], [9,6], [8,8]双指针）
，先讲解思路，编码，讲了几种测试用例的运行结果，大概10分钟
求满足180°旋转对称性质的所有n位数，分治方法，先构造出所有n - 2的数，再在首位各添加满足对称关系的一个数。
需要考虑前导零问题，当n == 1时，6和9不是旋转对称数字（这个出现了bug）。代码改完后问了下时间复杂度，大概是O(5^n)
面试管让模拟了n = 3时候程序的运行过程。最后问有么有时间复杂度更低的解法，应该是没有，n位旋转对称数字的个数就是O(5^n)，没办法再优

循环数组的查找
3Sum

LRU算法
如何实现数组去重，算法复杂度是多少。如果数组内是各种类型值都有呢
蛇形输出二维矩阵
两个二分查找树合并，O(n)时间复杂度（直接中序遍历得到两个列表，归并后再重建）
